import Head from 'next/head'
import { useEffect, useState } from 'react';

import styles from '../styles/Home.module.css'

interface Event {
    id: string;
    title: string;
}

const days = ["lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo"]

type Schedule = Map<string, Map<string, Event>>;

export default function Home() {
    const [date, setDate] = useState<Date>(() => new Date());
    const [schedule, setSchedule] = useState<Schedule>(() => new Map())
    const [daysArray, setDaysArray] = useState<String[]>([])
    const [isInitialRender, setIsInitialRender] = useState(true);

    function handleMonthChange(offset: number) {
        const draft = new Date(date);
        draft.setMonth(date.getMonth() + offset);
        setDate(draft);
        declareArray(draft)
    }

    function handleNewEvent(key: string) {
        const draft = new Map(schedule);
        if (!draft.has(key)) {
            draft.set(key, new Map());
        }

        const day = draft.get(key);
        const id = String(Date.now());
        const title = window.prompt("event title");

        if (!title) return;

        day?.set(id, {
            id,
            title
        });

        setSchedule(draft);
    }

    function handeDeleteEvent(key: string, id: string) {
        const draft = new Map(schedule);
        const day = draft.get(key)!;

        day.delete(id);
        setSchedule(draft);
    }

    function declareArray(localdate: Date) {
        const firstDay = new Date(localdate.getFullYear(), localdate.getMonth(), 1).toLocaleString('default', { weekday: "long" });

        const index = days.findIndex(day => day == firstDay);

        const tempA = Array.from({ length: index }, (_, i) => "");

        const tempB = Array.from({ length: new Date(localdate.getFullYear(), localdate.getMonth() + 1, 0).getDate() }, (_, i) => (i + 1).toString());

        const tempC = tempA.concat(tempB);
        setDaysArray(tempC);
    }

    useEffect(() => {
        if (isInitialRender) {
            setIsInitialRender(false)
            declareArray(date)
        }
    }, [isInitialRender]);


    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <nav className={styles.nav}>
                    <button onClick={() => handleMonthChange(-1)}>←</button>
                    &nbsp; {date.toLocaleString('default', { month: 'long', year: 'numeric' })} &nbsp;
                    <button onClick={() => handleMonthChange(1)}>→</button>
                </nav>
                <div className={styles.calendar}>
                    {Array.from({ length: 7 }, (_, i) => {
                        return <div key={i}>{days[i]}</div>
                    })}
                    {daysArray.map((day, i) => {
                        const key = `${date.getFullYear}/${date.getMonth()}/${i + 1}`;
                        const events = schedule.get(key);
                        return (
                            <div key={key} className={styles.day} onClick={() => handleNewEvent(key)}>
                                {(!events || events.size <= 0)  && <nav>
                                        <span>{day}</span>  <span>Eventos: 0</span> 
                                    </nav>}

                                {(events && events.size > 0) && (<>
                                    <nav>
                                        <span>{day}</span>  <span>Eventos: {events.size}</span> 
                                    </nav>
                                    <div className={styles.events}>
                                        {Array.from(events.values()).map((event) => (
                                            <div
                                                onClick={(e) => { e.stopPropagation(); handeDeleteEvent(key, event.id) }}
                                                className={styles.event}
                                                key={event.id}>
                                                {event.title}
                                            </div>
                                        ))}
                                    </div>
                                </>
                                )}
                            </div>
                        )
                    })}
                    {/* {Array.from({ length: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate() }, (_, i) => {
                        const key = `${date.getFullYear}/${date.getMonth()}/${i + 1}`;
                        const events = schedule.get(key);
                        return (
                            <div key={key} className={styles.day} onClick={() => handleNewEvent(key)}>
                                {i + 1}

                                {events && (
                                    <div className={styles.events}>
                                        {Array.from(events.values()).map((event) => (
                                            <div
                                                onClick={(e) => { e.stopPropagation(); handeDeleteEvent(key, event.id) }}
                                                className={styles.event}
                                                key={event.id}>
                                                {event.title}
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        )
                    })} */}
                </div>
                <nav className={styles.nav}>
                    <button onClick={() => setDate(new Date())}>TODAY</button>
                </nav>
            </main>
        </div>
    )
}
